def garble_it(js, minify_callback=None, **kwargs):
    """Runs the garble logic as a function using jsmin for minification rather than slimit
    Python 3 compatible.

    Takes a given JS string, garbles is and returns the output

    See https://github.com/StevenMapes/garble
    Fork of https://github.com/adamyork/garble

    :param string js: A string contain the Javascript you wish to garble
    :param function minify_callback: A callback function to use for minification
    :return string: The garbled Javascript
    """

    symbols = {
        'a': '((!!+[]+"")[+!![]])',
        'b': '((({})+"")[(+!![])+(+!![])])',
        'c': '((({})+"")[(+!![])+(+!![])+(+!![])+(+!![])+(+!![])])',
        'd': '((({})[""]+"")[(+!![])+(+!![])])',
        'e': '((!!+[]+"")[(+!![])+(+!![])+(+!![])+(+!![])])',
        'f': '((!!+[]+"")[+[]])',
        'g': '"\\x67"',
        'h': '"\\x68"',
        'i': '((+!![]/+[]+"")[(+!![])+(+!![])+(+!![])])',
        'j': '((({})+"")[(+!![])+(+!![])+(+!![])])',
        'k': '"\\x6B"',
        'l': '((!!+[]+"")[(+!![])+(+!![])])',
        'm': '"\\x6D"',
        'n': '((+!![]/+[]+"")[+!![]])',
        'o': '((({})+"")[+!![]])',
        'p': '"\\x70"',
        'q': '"\\x71"',
        'r': '((!+[]+"")[+!![]])',
        's': '((!!+[]+"")[(+!![])+(+!![])+(+!![])])',
        't': '((!+[]+"")[+[]])',
        'u': '((!+[]+"")[(+!![])+(+!![])])',
        'v': '"\\x76"',
        'w': '"\\x77"',
        'x': "'x'",
        'y': '((+!![]/+[]+"")[(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])])',
        'z': '"\\x7A"',
        'A': '"\\x41"',
        'B': '"\\x42"',
        'C': '"\\x43"',
        'D': '"\\x44"',
        'E': '"\\x45"',
        'F': '"\\x46"',
        'G': '"\\x47"',
        'H': '"\\x48"',
        'I': '((+!![]/+[]+"")[+[]])',
        'J': '"\\x4A"',
        'K': '"\\x4B"',
        'L': '"\\x4C"',
        'M': '"\\x4D"',
        'N': '((+[]/+[]+"")[+[]])',
        'O': '((({})+"")[(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])])',
        'P': '"\\x50"',
        'Q': '"\\x51"',
        'R': '"\\x52"',
        'S': '"\\x53"',
        'T': '"\\x54"',
        'U': '"\\x55"',
        'V': '"\\x56"',
        'W': '"\\x57"',
        'X': '"\\x58"',
        'Y': '"\\x59"',
        'Z': '"\\x5A"',
        "(": "'('",
        ")": "')'",
        "{": "'{'",
        "}": "'}'",
        "[": "'['",
        "]": "']'",
        ".": "'.'",
        ";": "';'",
        "@": "'@'",
        "*": "'*'",
        '"': "'\"'",
        "/": "'/'",
        ":": "':'",
        ",": "','",
        "'": '"\'"',
        "=": "'='",
        ">": "'>'",
        "<": "'<'",
        "!": "'!'",
        "$": "'$'",
        "_": "'_'",
        "#": "'#'",
        "+": "'+'",
        "-": "'-'",
        "%": "'%'",
        " ": "' '",
        "?": "'?'",
        "|": "'|'",
        "^": "'^'",
        "&": "'&'",
        "~": "'~'",
        "\\": "'\\\\'",
        "0": "(+[])",
        "1": "(+!![])",
        "2": "((+!![])+(+!![]))",
        "3": "((+!![])+(+!![])+(+!![]))",
        "4": "((+!![])+(+!![])+(+!![])+(+!![]))",
        "5": "((+!![])+(+!![])+(+!![])+(+!![])+(+!![]))",
        "6": "((+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![]))",
        "7": "((+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![]))",
        "8": "((+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![]))",
        "9": "((+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![])+(+!![]))"
    }

    js = js.replace(".deleteExpando", ".replaceLaterExpando").replace(".delete", "['delete']") \
        .replace(".replaceLaterExpando", ".deleteExpando").replace(".catch", "['catch']")
    if minify_callback:
        js = minify_callback(js, **kwargs)

    output_js = "[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+" \
                "!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[" \
                "+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[" \
                "][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[" \
                "+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])" \
                "[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[" \
                "]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[" \
                "]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+" \
                "[]+[+[]]]+(!![]+[])[+!+[]]]("
    transformed = []

    for i in range(len(js)):
        if i == 0:
            transformed.append(symbols[js[i]] + "+")
        elif i == len(js) - 1:
            transformed.append(symbols[js[i]])
        else:
            transformed.append(symbols[js[i]] + "+")
    output_js += "".join(transformed) + ")()"

    return output_js
